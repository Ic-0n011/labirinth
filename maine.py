from random import randint, choice

"""
–õ–∞–±–∏—Ä–∏–Ω—Ç
    –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ (3x3 9x9 5x5 –∏ —Ç–¥)

    ‚¨õ‚¨úüü•üü©üü¶

    ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ
    ‚¨ú‚¨ú‚¨õ‚¨ú‚¨õ
    ‚¨õ‚¨ú‚¨õ‚¨ú‚¨ú
    ‚¨õ‚¨ú‚¨ú‚¨ú‚¨õ
    ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ

    –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–µ–Ω–∞–º–∏ -> –∫–∏–¥–∞–µ–º –±—É–ª—å–¥–æ–∑–µ—Ä(–Ω–∞—á–Ω –≤ —á–µ—Ç–Ω –∫–ª–µ—Ç–∫–µ)
      –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –Ω–∞–º –ø—Ä–æ—Ö–æ–¥(–µ—Å–ª–∏ –≤ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö –æ—Ç –Ω–µ–≥–æ —Å—Ç–µ–Ω—ã - –æ–Ω –∏—Ö –ª–æ–º–∞–µ—Ç)
        –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –≤ —á–µ—Ç–Ω—ã—Ö –Ω–µ—Ç —Å—Ç–µ–Ω
          –≤—Å–µ —á–µ—Ç–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã | –µ—Å—Ç—å –≤—ã—Ö–æ–¥
"""
labyrinth_size = randint(3, 47)
if labyrinth_size % 2 == 0:
    labyrinth_size += 1


# –°–æ–∑–¥–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç
def create_labyrinth(labyrinth_size):
    labyrinth = []
    for n in range(labyrinth_size):
        labyrinth.append([])
        for _ in range(labyrinth_size):
            labyrinth[n].append(1)
    return labyrinth


# –ø–æ–∫–∞–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def show(labyrinth):
    for col in labyrinth:
        cells = []
        for cell in col:
            if cell == 1:
                cells.append('‚¨õ')
            else:
                cells.append('‚¨ú')
        print(*cells)


class Drill():
    def __init__(self, x=1, y=1) -> None:
        self.y = y
        self.x = x

    def drill(self) -> bool:
        # —Å–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–¥–∏–Ω–∞—Ç –±—É—Ä–∞
        clean_passages = []
        crossroads = None
        if self.y + 2 < labyrinth_size:
            if labyrinth[self.y + 2][self.x] == 1:
                clean_passages.append((1, 0))
        if self.x + 2 < labyrinth_size:
            if labyrinth[self.y][self.x + 2] == 1:
                clean_passages.append((0, 1))
        if self.y - 2 > 0:
            if labyrinth[self.y - 2][self.x] == 1:
                clean_passages.append((-1, 0))
        if self.x - 2 > 0:
            if labyrinth[self.y][self.x - 2] == 1:
                clean_passages.append((0, -1))

        if len(clean_passages) > 1:
            crossroads = (self.x, self.y)

        if clean_passages:  # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –±—É—Ä–∏–º
            direction = choice(clean_passages)
            for _ in range(2):
                self.y += direction[0]
                self.x += direction[1]
                labyrinth[self.y][self.x] = 0
        else:  # –∏–Ω–∞—á–µ —É–¥–∞–ª—è–µ–º—Å—è
            return 'Del'
        return crossroads


# –¥–µ–ª–∞–µ–º –≤ –Ω–µ–º –ø—Ä–æ—Ö–æ–¥—ã
def drilling_labyrinth() -> None:
    # —Å–æ–∑–¥–∞–µ–º –±—É—Ä, –¥–µ–ª–∞–µ–º –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
    drills = []
    cord_fest_dril = randint(3, labyrinth_size-3)
    if cord_fest_dril % 2 == 0:
        cord_fest_dril += 1
    drills.append(Drill(cord_fest_dril, cord_fest_dril))
    labyrinth[drills[0].x][drills[0].y] = 0
    labyrinth[0][1] = 0
    labyrinth[labyrinth_size-1][labyrinth_size-2] = 0
    while True:
        # –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ - –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∫–æ—Ä–¥–∏–Ω–∞—Ç—É
        for drill in drills:
            result = drill.drill()
            if result == 'Del':
                drills.remove(drill)
            elif result:
                drills.append(Drill(result[0], result[1]))
        if not drills:  # –µ—Å–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –±—É—Ä–∏—Ç—å
            break


labyrinth = create_labyrinth(labyrinth_size)
drilling_labyrinth()
show(labyrinth)

# FIXME: –±—É–ª—å–¥–æ–∑–µ—Ä –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–æ–º–∞–µ—Ç —Å—Ç–µ–Ω—ã
